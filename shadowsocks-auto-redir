#!/bin/bash
echoerr() { echo "$@" 1>&2; }
do_ip6tables() {
    if [ "$DEBUG" == "1" ]; then
        echo "ip6tables $@"
    else
        ip6tables $@
    fi

}
do_iptables() {
    if [ "$DEBUG" == "1" ]; then
        echo "iptables $@"
    else
        iptables $@
    fi
}
do_ipset() {
    if [ "$DEBUG" == "1" ]; then
        echo "ipset $@"
    else
        ipset $@
    fi
}
do_ip() {
    if [ "$DEBUG" == "1" ]; then
        echo "ip $@"
    else
        ip $@
    fi
}
do_ss_redir() {
    if [ "$DEBUG" == "1" ]; then
        echo "ss-redir $@"
    else
        ss-redir $@
    fi
}
clear_rules() {
    echo "Clearing rules"

    # TCP
    do_iptables -t nat -D OUTPUT -p tcp -j SHADOWSOCKS_TCP

    do_iptables -t nat -F SHADOWSOCKS_TCP
    do_iptables -t nat -X SHADOWSOCKS_TCP

    # UDP
    do_iptables -t mangle -D PREROUTING -p udp -j SHADOWSOCKS_UDP
    do_iptables -t mangle -D OUTPUT -p udp -j SHADOWSOCKS_UDP_MARK

    do_iptables -t mangle -F SHADOWSOCKS_UDP
    do_iptables -t mangle -X SHADOWSOCKS_UDP

    do_iptables -t mangle -F SHADOWSOCKS_UDP_MARK
    do_iptables -t mangle -X SHADOWSOCKS_UDP_MARK

    do_ip route del local default dev lo table 100
    do_ip rule del fwmark 1 lookup 100

    # ipset
    do_ipset destroy shadowsocks

    if [[ "$IPV6" == "true" ]]; then
        do_iptables -D INPUT -p tcp --dport $LOCAL_PORT -j DROP
	    do_iptables -D INPUT -p tcp --dport $LOCAL_PORT -i lo -j ACCEPT
	    do_ip6tables -D INPUT -p tcp --dport $LOCAL_PORT -j DROP
	    do_ip6tables -D INPUT -p tcp --dport $LOCAL_PORT -i lo -j ACCEPT
	    do_ip6tables -t nat -D OUTPUT -p tcp -o lo -j RETURN
        do_ip6tables -t nat -D OUTPUT -p tcp -j REDIRECT --to-port $LOCAL_PORT
    fi

}
find_script_path() {
    SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
}

find_script_path

# MUST be run as root
if [ `id -u` != "0" ]; then
    echoerr "This script MUST BE run as ROOT"
    exit 1
fi

CONFIG_PATH="$1"

if [ "$CONFIG_PATH" == "" ]; then
    echoerr "Usage: shadowsocks-auto-redir <path to config.json>"
    exit 1
elif [ "$CONFIG_PATH" == "clear" ]; then
    clear_rules
    exit 0
elif [ ! -f "$CONFIG_PATH" ]; then
    echoerr "$CONFIG_PATH does not exist"
    exit 1
fi

# IP内网地址
BYPASS_RESERVED_IPS=" \
    0.0.0.0/8 \
    10.0.0.0/8 \
    127.0.0.0/8 \
    169.254.0.0/16 \
    172.16.0.0/12 \
    192.168.0.0/16 \
    224.0.0.0/4 \
    240.0.0.0/4 \
"

# Load bypass route set
do_ipset -N shadowsocks hash:net maxelem 65536

# add subnet address to ipset
for line in $BYPASS_RESERVED_IPS; do
    do_ipset add shadowsocks $line
done

# Bypass ips
SERVER=`jq -r ".server" $CONFIG_PATH`

if [[ $SERVER =~ "127."* ]]; then
    echo "Skipping local address $SERVER"
else
    do_ipset add shadowsocks $SERVER
fi

BYPASS_IPS=`jq -r ".ss_redir_options.bypass_ips" $CONFIG_PATH`

if [[ "$BYPASS_IPS" != "null" ]]; then
    # Should only iterate when the item is not null
    BYPASS_IPS=`jq -r ".ss_redir_options.bypass_ips[]" $CONFIG_PATH`
    for ip in $BYPASS_IPS; do
        do_ipset add shadowsocks $ip
    done
fi

# chn ip
BYPASS_PRESET=`jq -r ".ss_redir_options.bypass_preset" $CONFIG_PATH`

if [[ "$BYPASS_PRESET" == "chnroute" ]]; then
    for ip in `cat $SCRIPT_PATH/routes/chnroute.txt`; do
        do_ipset add shadowsocks $ip
    done
fi


# TCP rules
do_iptables -t nat -N SHADOWSOCKS_TCP

# Bypass users
BYPASS_USERS=`jq -r ".ss_redir_options.bypass_users" $CONFIG_PATH`
if [[ "$BYPASS_USERS" != "null" ]]; then
    BYPASS_USERS=`jq -r ".ss_redir_options.bypass_users[]" $CONFIG_PATH`
    for user in $BYPASS_USERS; do
        do_iptables -t nat -A SHADOWSOCKS_TCP -m owner --uid-owner $user -j RETURN
        #do_ip6tables -t nat -A OUTPUT -m owner --uid-owner $user -j RETURN
    done
fi

# Redirect to ss-redir port
LOCAL_PORT=`jq -r ".local_port" $CONFIG_PATH`
do_iptables -t nat -A SHADOWSOCKS_TCP -p tcp -m set --match-set shadowsocks dst -j RETURN
do_iptables -t nat -A SHADOWSOCKS_TCP -p tcp -j REDIRECT --to-ports $LOCAL_PORT

# Apply for tcp
do_iptables -t nat -A OUTPUT -p tcp -j SHADOWSOCKS_TCP


# UDP规则
do_iptables -t mangle -N SHADOWSOCKS_UDP
do_iptables -t mangle -N SHADOWSOCKS_UDP_MARK

do_ip route add local default dev lo table 100
do_ip rule add fwmark 1 lookup 100

do_iptables -t mangle -A SHADOWSOCKS_UDP -p udp -m set --match-set shadowsocks dst -j RETURN
do_iptables -t mangle -A SHADOWSOCKS_UDP -p udp -j TPROXY --on-port $LOCAL_PORT --tproxy-mark 0x01/0x01

do_iptables -t mangle -A SHADOWSOCKS_UDP_MARK -p udp -m set --match-set shadowsocks dst -j RETURN
do_iptables -t mangle -A SHADOWSOCKS_UDP_MARK -p udp -j MARK --set-mark 1

# Bypass users
BYPASS_USERS=`jq -r ".ss_redir_options.bypass_users" $CONFIG_PATH`
if [[ "$BYPASS_USERS" != "null" ]]; then
    BYPASS_USERS=`jq -r ".ss_redir_options.bypass_users[]" $CONFIG_PATH`
    for user in $BYPASS_USERS; do
        do_iptables -t nat -A SHADOWSOCKS_UDP -m owner --uid-owner $user -j RETURN
        do_iptables -t nat -A SHADOWSOCKS_UDP_MARK -m owner --uid-owner $user -j RETURN
        #do_ip6tables -t nat -A OUTPUT -m owner --uid-owner $user -j RETURN
    done
fi

# Apply for udp
do_iptables -t mangle -A PREROUTING -p udp -j SHADOWSOCKS_UDP
do_iptables -t mangle -A OUTPUT -p udp -j SHADOWSOCKS_UDP_MARK

# IPv6 redirect to IPv4 Shadowsocks
# Please set local_address to ::
IPV6=`jq -r ".ss_redir_options.ipv6_to_ipv4" $CONFIG_PATH`

if [[ "$IPV6" == "true" ]]; then
    do_iptables -I INPUT -p tcp --dport $LOCAL_PORT -j DROP
	do_iptables -I INPUT -p tcp --dport $LOCAL_PORT -i lo -j ACCEPT
	do_ip6tables -I INPUT -p tcp --dport $LOCAL_PORT -j DROP
	do_ip6tables -I INPUT -p tcp --dport $LOCAL_PORT -i lo -j ACCEPT
	do_ip6tables -t nat -I OUTPUT -p tcp -o lo -j RETURN
    do_ip6tables -t nat -A OUTPUT -p tcp -j REDIRECT --to-port $LOCAL_PORT
fi

# Build ss-redir params
SS_PARAMS="-u -c $CONFIG_PATH"

if [[ `jq -r ".ss_redir_options.ota" $CONFIG_PATH` == "true" ]]; then
    SS_PARAMS="$SS_PARAMS"
fi

do_ss_redir $SS_PARAMS

# ss-redir has exited.
clear_rules
